#pragma once

#include "ash.encoding.h"


namespace Ash
{
	namespace Encoding
	{
		namespace Iso8859
		{
			using Code = uint8_t;

			namespace Generic
			{
				class Table {};
			}

			template
			<
				Ash::Encoding::CodeUnit16 START_CODE,
				size_t                    SIZE = 0x100 - START_CODE
			>
			class Table : Generic::Table
			{
			public:
				static constexpr Ash::Encoding::CodeUnit16 startCode = START_CODE;

				static constexpr size_t size = SIZE;

				constexpr Table(const Ash::Encoding::CodeUnit16 (&unicodeValues)[size]) : m_ToUnicode(unicodeValues), m_FromUnicode(unicodeValues) {}

				constexpr bool isCodeValid(Code code) const { return m_ToUnicode.isValid(code); }

				constexpr bool isCharacterValid(Ash::Unicode::Character character) const { return m_FromUnicode.isValid(character); }

				constexpr Ash::Unicode::Character getCharacter(Code code) const { return m_ToUnicode.convert(code); }

				constexpr Code getCode(Ash::Unicode::Character character, Code replacement = '?') const { return m_FromUnicode.convert(character, replacement); }

			protected:
				class ToUnicode : public Ash::Memory::Sequence<Ash::Encoding::CodeUnit16, size>
				{
				public:
					using Content = Ash::Memory::Sequence<Ash::Encoding::CodeUnit16, size>;

					constexpr ToUnicode(const Ash::Encoding::CodeUnit16 (&unicodeValues)[size]) : Content(unicodeValues, size) {}

					constexpr bool isValid(Code code) const
					{
						return (code < startCode) || (Content::getOr(code - startCode, Ash::Unicode::Character::replacement) != Ash::Unicode::Character::replacement);
					}

					constexpr Ash::Unicode::Character convert(Code code) const
					{
						return (code < startCode) ? code : Content::getOr(code - startCode, Ash::Unicode::Character::replacement);
					}
				};

				class FromUnicode
				{
				public:
					constexpr FromUnicode(const Ash::Encoding::CodeUnit16 (&unicodeValues)[size]) : m_Conversion()
					{
						Code code = startCode;
						for (Ash::Encoding::CodeUnit16 unicode : unicodeValues)
						{
							if (unicode != Ash::Unicode::Character::replacement)
							{
								insert(Conversion(unicode, code));
							}
							code++;
						}
					}

					constexpr bool isValid(Ash::Unicode::Character character) const
					{
						return (character == '\0') || (convert(character, '\0') != '\0');
					}

					constexpr Code convert(Ash::Unicode::Character character, Code replacementValue = '?') const
					{
						if (character < startCode)
						{
							return character;
						}

						size_t from = 0;
						size_t to = m_Conversion.getLength();
						
						if ((character < m_Conversion.at(from)->from) || (character > m_Conversion.at(to - 1)->from))
						{
							return replacementValue;
						}

						while (to > from)
						{
							size_t middle = from + (to - from) / 2;
							if (m_Conversion.at(middle)->from == character)
							{
								return m_Conversion.at(middle)->to;
							}
							else if (m_Conversion.at(middle)->from > character)
							{
								to = middle;
							}
							else
							{
								from = middle + 1;
							}
						}
						return replacementValue;
					}

				protected:
					struct Conversion
					{
						constexpr Conversion() : from(0), to(0) {}

						constexpr Conversion(Ash::Encoding::CodeUnit16 fromValue, Code toValue) : from(fromValue), to(toValue) {}

						Ash::Encoding::CodeUnit16 from;
						Code                      to;
					};

					constexpr void insert(Conversion conversion)
					{
						size_t offset = m_Conversion.getLength();
						if (offset > 0)
						{
							if (conversion.from < m_Conversion.at(0)->from)
							{
								offset = 0;
							}
							else if (conversion.from < m_Conversion.at(offset - 1)->from)
							{
								size_t from = 0;
								size_t to = offset;
								for (;;)
								{
									offset = from + (to - from) / 2;
									if (conversion.from < m_Conversion.at(offset)->from)
									{
										to = offset;
									}
									else
									{
										offset++;
										if (conversion.from > m_Conversion.at(offset)->from)
										{
											from = offset;
										}
										else
										{
											break;
										}
									}
								}
							}
						}
						m_Conversion.insert(offset, conversion);
					}

				private:
					Ash::Memory::Buffer<Conversion, size> m_Conversion;
				};

			private:
				ToUnicode   m_ToUnicode;
				FromUnicode m_FromUnicode;
			};

			template
			<
				Ash::Encoding::CodeUnit16 START_CODE
			>
			class Table<START_CODE, 0x00> : Generic::Table
			{
			public:
				static constexpr Ash::Encoding::CodeUnit16 startCode = START_CODE;

				static constexpr size_t size = 0;

				constexpr Table() {}

				constexpr bool isCodeValid(Code code) const { return code < startCode; }

				constexpr bool isCharacterValid(Ash::Unicode::Character character) const { return character < startCode; }

				constexpr Ash::Unicode::Character getCharacter(Code code) const { return (code < startCode) ? code : Ash::Unicode::Character::replacement; }

				constexpr Code getCode(Ash::Unicode::Character character, Code replacementValue = '?') const { return (character < startCode) ? Code(character) : replacementValue; }
			};

			using Table1 = Table<0x100>;

			class Table2 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table2() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x0104, 0x02D8, 0x0141, 0x00A4, 0x013D, 0x015A, 0x00A7, 0x00A8, 0x0160, 0x015E, 0x0164, 0x0179, 0x00AD, 0x017D, 0x017B,
					0x00B0, 0x0105, 0x02DB, 0x0142, 0x00B4, 0x013E, 0x015B, 0x02C7, 0x00B8, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C,
					0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
					0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7, 0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
					0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
					0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7, 0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
				};
			};

			class Table3 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table3() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x0126, 0x02D8, 0x00A3, 0x00A4, 0xFFFD, 0x0124, 0x00A7, 0x00A8, 0x0130, 0x015E, 0x011E, 0x0134, 0x00AD, 0xFFFD, 0x017B,
					0x00B0, 0x0127, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x0125, 0x00B7, 0x00B8, 0x0131, 0x015F, 0x011F, 0x0135, 0x00BD, 0xFFFD, 0x017C,
					0x00C0, 0x00C1, 0x00C2, 0xFFFD, 0x00C4, 0x010A, 0x0108, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
					0xFFFD, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x0120, 0x00D6, 0x00D7, 0x011C, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x016C, 0x015C, 0x00DF,
					0x00E0, 0x00E1, 0x00E2, 0xFFFD, 0x00E4, 0x010B, 0x0109, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
					0xFFFD, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x0121, 0x00F6, 0x00F7, 0x011D, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x016D, 0x015D, 0x02D9
				};
			};

			class Table4 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table4() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x0104, 0x0138, 0x0156, 0x00A4, 0x0128, 0x013B, 0x00A7, 0x00A8, 0x0160, 0x0112, 0x0122, 0x0166, 0x00AD, 0x017D, 0x00AF,
					0x00B0, 0x0105, 0x02DB, 0x0157, 0x00B4, 0x0129, 0x013C, 0x02C7, 0x00B8, 0x0161, 0x0113, 0x0123, 0x0167, 0x014A, 0x017E, 0x014B,
					0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x012A,
					0x0110, 0x0145, 0x014C, 0x0136, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x0168, 0x016A, 0x00DF,
					0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x012B,
					0x0111, 0x0146, 0x014D, 0x0137, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x0169, 0x016B, 0x02D9
				};
			};

			class Table5 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table5() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x0401, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 0x0408, 0x0409, 0x040A, 0x040B, 0x040C, 0x00AD, 0x040E, 0x040F,
					0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
					0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
					0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
					0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
					0x2116, 0x0451, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456, 0x0457, 0x0458, 0x0459, 0x045A, 0x045B, 0x045C, 0x045D, 0x045E, 0x045F
				};
			};

			class Table6 : public Table<0xA1, 0x52>
			{
			public:
				using Table = Table<0xA1, 0x52>;

				constexpr Table6() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0xFFFD, 0xFFFD, 0xFFFD, 0x00A4, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x060C, 0x00AD, 0xFFFD, 0xFFFD,
					0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x061B, 0xFFFD, 0xFFFD, 0xFFFD, 0x061F,
					0xFFFD, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
					0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
					0x0640, 0x0641, 0x0642, 0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F,
					0x0650, 0x0651, 0x0652
				};
			};

			class Table7 : public Table<0xA1, 0x5E>
			{
			public:
				using Table = Table<0xA1, 0x5E>;

				constexpr Table7() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x2018, 0x2019, 0x00A3, 0x20AC, 0x20AF, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x037A, 0x00AB, 0x00AC, 0x00AD, 0xFFFD, 0x2015,
					0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x0385, 0x0386, 0x00B7, 0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
					0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
					0x03A0, 0x03A1, 0xFFFD, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
					0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
					0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE
				};
			};

			class Table8 : public Table<0xA1, 0x5E>
			{
			public:
				using Table = Table<0xA1, 0x5E>;

				constexpr Table8() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0xFFFD, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
					0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0xFFFD,
					0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD,
					0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x2017,
					0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
					0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0xFFFD, 0xFFFD, 0x200E, 0x200F
				};
			};

			class Table9 : public Table<0xD0>
			{
			public:
				using Table = Table<0xD0>;

				constexpr Table9() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0130, 0x015E, 0x00DF,
					0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
					0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
				};
			};

			class Table10 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table10() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x0104, 0x0112, 0x0122, 0x012A, 0x0128, 0x0136, 0x00A7, 0x013B, 0x0110, 0x0160, 0x0166, 0x017D, 0x00AD, 0x016A, 0x014A,
					0x00B0, 0x0105, 0x0113, 0x0123, 0x012B, 0x0129, 0x0137, 0x00B7, 0x013C, 0x0111, 0x0161, 0x0167, 0x017E, 0x2015, 0x016B, 0x014B,
					0x0100, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x00CF,
					0x00D0, 0x0145, 0x014C, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x0168, 0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
					0x0101, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x00EF,
					0x00F0, 0x0146, 0x014D, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x0169, 0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x0138
				};
			};

			class Table11 : public Table<0xA1, 0x5B>
			{
			public:
				using Table = Table<0xA1, 0x5B>;

				constexpr Table11() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07, 0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
					0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17, 0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
					0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27, 0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
					0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37, 0x0E38, 0x0E39, 0x0E3A, 0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, 0x0E3F,
					0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47, 0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
					0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57, 0x0E58, 0x0E59, 0x0E5A, 0x0E5B
				};
			};

			class Table13 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table13() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7, 0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
					0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7, 0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
					0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112, 0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
					0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7, 0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
					0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113, 0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
					0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7, 0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019
				};
			};

			class Table14 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table14() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x1E02, 0x1E03, 0x00A3, 0x010A, 0x010B, 0x1E0A, 0x00A7, 0x1E80, 0x00A9, 0x1E82, 0x1E0B, 0x1EF2, 0x00AD, 0x00AE, 0x0178,
					0x1E1E, 0x1E1F, 0x0120, 0x0121, 0x1E40, 0x1E41, 0x00B6, 0x1E56, 0x1E81, 0x1E57, 0x1E83, 0x1E60, 0x1EF3, 0x1E84, 0x1E85, 0x1E61,
					0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
					0x0174, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x1E6A, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x0176, 0x00DF,
					0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
					0x0175, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x1E6B, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x0177, 0x00FF
				};
			};

			class Table15 : public Table<0xA4>
			{
			public:
				using Table = Table<0xA4>;

				constexpr Table15() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					                                0x20AC, 0x00A5, 0x0160, 0x00A7, 0x0161, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
					0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x017D, 0x00B5, 0x00B6, 0x00B7, 0x017E, 0x00B9, 0x00BA, 0x00BB, 0x0152, 0x0153, 0x0178, 0x00BF,
					0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
					0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
					0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
					0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
				};
			};

			class Table16 : public Table<0xA1>
			{
			public:
				using Table = Table<0xA1>;

				constexpr Table16() : Table(values) {}

			private:
				static constexpr Ash::Encoding::CodeUnit16 values[size] =
				{
					        0x0104, 0x0105, 0x0141, 0x20AC, 0x201E, 0x0160, 0x00A7, 0x0161, 0x00A9, 0x0218, 0x00AB, 0x0179, 0x00AD, 0x017A, 0x017B,
					0x00B0, 0x00B1, 0x010C, 0x0142, 0x017D, 0x201D, 0x00B6, 0x00B7, 0x017E, 0x010D, 0x0219, 0x00BB, 0x0152, 0x0153, 0x0178, 0x017C,
					0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0106, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
					0x0110, 0x0143, 0x00D2, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x015A, 0x0170, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x0118, 0x021A, 0x00DF,
					0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x0107, 0x00E6, 0x00E7, 0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
					0x0111, 0x0144, 0x00F2, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x015B, 0x0171, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0119, 0x021B, 0x00FF
				};
			};

			namespace Generic
			{
				class Part : Ash::Generic::Encoding {};
			}

			template
			<
				typename TABLE,
				typename = Ash::Type::IsClass<TABLE, Ash::Encoding::Iso8859::Generic::Table>
			>
			class Part : Ash::Encoding::Iso8859::Generic::Part
			{
			public:
				using Table = TABLE;

				using Code = Ash::Encoding::Iso8859::Code;

				static constexpr size_t minSize = 1;

				static constexpr size_t maxSize = 1;

				static constexpr bool isLittleEndian = false;

				static constexpr bool isBigEndian = false;

				class Character : public Ash::Memory::Buffer<Code, maxSize>
				{
				public:
					static constexpr Ash::Unicode::Character replacement = '?';

					constexpr Character() : Ash::Memory::Buffer<Code, maxSize>() {}

					constexpr Character(Ash::Unicode::Character character) : Ash::Memory::Buffer<Code, maxSize>()
					{
						set(character);
					}

					constexpr Ash::Unicode::Character operator = (Ash::Unicode::Character character)
					{
						set(character);
						return character;
					}

					constexpr operator Ash::Unicode::Character () const { return (getLength() > 0) ? getCharacter((*this)[0]) : Ash::Unicode::Character(Ash::Unicode::Character::replacement); }

				protected:
					static const Table &getTable()
					{
						static Table table;

						return table;
					}

					static constexpr bool isCodeValid(Code code) { return getTable().isCodeValid(code); }

					static constexpr bool isCharacterValid(Ash::Unicode::Character character) { return getTable().isCharacterValid(character); }

					static constexpr Ash::Unicode::Character getCharacter(Code code) { return getTable().getCharacter(code); }

					static constexpr Code getCode(Ash::Unicode::Character character, Code replacement = '?') { return getTable().getCode(character, replacement); }

					constexpr void set(Ash::Unicode::Character character)
					{
						if (isCharacterValid(character))
						{
							setLength(1);
							(*this)[0] = getCode(character);
						}
						else
						{
							setLength(0);
						}
					}

					constexpr size_t set(Code code)
					{
						setLength(1);
						(*this)[0] = code;
						return 1;
					}

					friend Part;
				};

				template
				<
					typename ALLOCATION,
					typename = Ash::Type::IsClass<ALLOCATION, Ash::Memory::Generic::Allocation>
				>
				static constexpr size_t decodeNext(const Ash::Memory::Value<ALLOCATION, Code> &value, size_t offset, Character &character)
				{
					Code code = 0;

					if (value.get(offset, code) && Character::isCodeValid(code))
					{
						return character.set(code);
					}
					else
					{
						character.clear();
						return 0;
					}
				}

				template
				<
					typename ALLOCATION,
					typename = Ash::Type::IsClass<ALLOCATION, Ash::Memory::Generic::Allocation>
				>
				static constexpr size_t decodePrevious(const Ash::Memory::Value<ALLOCATION, Code> &value, size_t offset, Character &character)
				{
					Code code = 0;

					if ((offset > 0) && value.get(--offset, code) && Character::isCodeValid(code))
					{
						return character.set(code);
					}
					else
					{
						character.clear();
						return 0;
					}
				}

			private:
				Part();
			};

			using Part1 = Ash::Encoding::Iso8859::Part<Table1>;
			using WestEuropean = Part1;

			using Part2 = Ash::Encoding::Iso8859::Part<Table2>;
			using CentralEuropean = Part2;

			using Part3 = Ash::Encoding::Iso8859::Part<Table3>;
			using SouthEuropean = Part3;

			using Part4 = Ash::Encoding::Iso8859::Part<Table4>;
			using NorthEuropean = Part4;

			using Part5 = Ash::Encoding::Iso8859::Part<Table5>;
			using Cyrillic = Part5;

			using Part6 = Ash::Encoding::Iso8859::Part<Table6>;
			using Arabic = Part6;

			using Part7 = Ash::Encoding::Iso8859::Part<Table7>;
			using Greek = Part7;

			using Part8 = Ash::Encoding::Iso8859::Part<Table8>;
			using Hebrew = Part8;

			using Part9 = Ash::Encoding::Iso8859::Part<Table9>;
			using Turkish = Part9;

			using Part10 = Ash::Encoding::Iso8859::Part<Table10>;
			using Nordic = Part10;

			using Part11 = Ash::Encoding::Iso8859::Part<Table11>;
			using Thai = Part11;

			using Part13 = Ash::Encoding::Iso8859::Part<Table13>;
			using Baltic = Part13;

			using Part14 = Ash::Encoding::Iso8859::Part<Table14>;
			using Celtic = Part14;

			using Part15 = Ash::Encoding::Iso8859::Part<Table15>;
			using WestEuropeanNew = Part15;

			using Part16 = Ash::Encoding::Iso8859::Part<Table16>;
			using Romanian = Part16;
		}
	}
}
